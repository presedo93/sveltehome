{
	"title": "Proyectos",
	"intro": "La mejor forma de aprender un nuevo lenguaje o sobre un nuevo framework es creando pequeños (o no tan pequeños) proyectos que te obliguen a ensuciarte las manos... por eso, durante los años he ido aprovechando los ratos de tiempo libre para empezar con pequeñas ideas!",
	"fitnote1": "Este esta siendo el último proyecto en el que estoy trabajando, y quizás el que más tiempo le he dedicado. Nunca he llegado a encontrar una aplicación que me terminara de gustar para registrar mis entrenamientos o mis diestas y hacer un seguimiento de ellas... así que sin saber nada de desarrollo en dipositivos móviles embarcarme en la idea de crear mi propia app.",
	"fitnote2": "Para el front uso {{ native }}, junto con varias librerías muy conocidas como {{ query }} o {{ jotai }}. Para los estilos decidí probar <code>@restyle</code> de {{ shopify }}. Las animaciones y gestión de gestos con Reanimated v3 y Gesture Handler. Y una ristra de librerías de Expo y React Native Navigation, como Expo Router.",
	"fitnote3": "Sería muy difícil mantener un front y un back por mi solo. Por lo tanto, para la segunda parte he decidido ir a por una solución todo en uno. La más común es Firebase, sin embargo, tenía ganas de probar alguna alternativa. Por lo tanto, uso {{ supabase }}! PostgreSQL encaja muy bien con la aplicación y el resto de herramientas que ofrece permite tener todo en un mismo servicio.",
	"fitnote4": "Nota: aun está bastante verde...",
	"homepage1": "Hace algún tiempo, hice una primera versión de esta web. Entonces elegí hacerla usando {{ nextjs }}. Para el diseño de componentes usé ChakraUI y para animaciones Framer Motion. La imagen que acompaña a esta sección es una captura de aquella versión.",
	"homepage2": "Sin embargo, esta versión esta hecha con {{ sveltekit }}! Llevaba un tiempo escuchando sobre Svelte y ha sido una buena excusa para aprender a usarlo. Para el estilo, he usado TailwindCSS y como libreria de componentes melt-ui. Finalmente, tiene soporte para Inglés y Español.",
	"tweesent1": "TweeSent consiste en hacer un sitio web donde el usuario pudiera hacer análisis de sentimiento en Twitter. Se introduce en el campo de búsqueda las palabras claves o el nombre de usuario. Los tweets se van posicionando según si son negativos, positivos o neutros.",
	"tweesent2": "Para la parte del backend, se usa {{ fastapi }}. Una vez recibida la petición HTTP, la consulta a Twitter, ahora X, se hace con tweepy (bueno, se hacía hasta que Twitter decidió cerrar su API...) y se realiza un poco de preprocesado de texto para dejar el input al modelo lo más limpio posible. Finalmente, usando ONNX, se corre el modelo de Machine Learning (basado en BERT) para obtener las predicciones.",
	"tweesent3": "El proyecto para entrenar los modelos consiste en una interfaz gráfica usando {{ streamlit }}. El usuario selecciona el modelo que quiere usar, el dataset sobre el que quiere basarse y la tarea que quiere realizar (fine-tunning, testing o inference). Para el Machine Learning se usa {{ lightning }}, donde se definen las métricas, los modelos soportados y las funciones de entreno, validación y testing que se invocaban desde la UI en Streamlit.",
	"tweesent4": "Por último, el frontend tuvo dos versiones. La primera era con {{ vue }}, Typescript y Bootstrap. Sin embargo, para tener tener oportunidad de profundizar un poco en React, hice una segunda versión usando TS, Vite y TailwindCSS.",
	"backtesting1": "El nombre lo dice todo del proyecto... fue una idea que surgió con varios amigos cercanos de la carrera. Y una muy buena oportunidad para profundizar en Python y el mundo de la estadística, los métodos numéricos y la inteligencia articial!",
	"backtesting2": "El proyecto consiste en una herramienta de análisis de acciones en distintos horizontes temporales. Usando librerías como {{ pandas }} para manejar los dataframes y {{ numpy }} para programar los distintos algoritmos e indicadores técnicos usados en trading...",
	"backtesting3": "Mediante línea de comandos, el usuario podía introducir el nombre de la acción. PyStock hacía fetch de los datos de la API de Alpha Vantage y hacía backtesting de la estrategia elegida. Dicha estrategia se tenía que programar en Python (dentro de la carpeta de estrategías en el repo) y llegamos a desarrollar una gran cantidad de indicadores técnicos, algoritmos de velas japonesas y versiones que corrían modelos sencillos de ML."
}
